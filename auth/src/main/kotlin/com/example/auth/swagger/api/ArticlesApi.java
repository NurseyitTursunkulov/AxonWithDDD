/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.auth.swagger.api;

import com.example.articles.swagger.api.ArticlesApiDelegate;
import com.example.articles.swagger.api.GenericErrorModelData;
import com.example.testfordatabase.swagger.api.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-19T14:53:52.454350+01:00[Europe/Berlin]")
@Validated
@Api(value = "articles", description = "the articles API")
public interface ArticlesApi {

    default ArticlesApiDelegate getDelegate() {
        return new ArticlesApiDelegate() {};
    }

    /**
     * POST /articles : Create an article
     * Create an article. Auth is required
     *
     * @param article Article to create (required)
     * @return OK (status code 201)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Create an article", nickname = "createArticle", notes = "Create an article. Auth is required", response = SingleArticleResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Articles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = SingleArticleResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PostMapping(
        value = "/articles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SingleArticleResponseData> createArticle(@ApiParam(value = "Article to create" ,required=true )  @Valid @RequestBody NewArticleRequestData article) {
        return getDelegate().createArticle(article);
    }


    /**
     * POST /articles/{slug}/comments : Create a comment for an article
     * Create a comment for an article. Auth is required
     *
     * @param slug Slug of the article that you want to create a comment for (required)
     * @param comment Comment you want to create (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Create a comment for an article", nickname = "createArticleComment", notes = "Create a comment for an article. Auth is required", response = SingleCommentResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SingleCommentResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PostMapping(
        value = "/articles/{slug}/comments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SingleCommentResponseData> createArticleComment(@ApiParam(value = "Slug of the article that you want to create a comment for",required=true) @PathVariable("slug") String slug,@ApiParam(value = "Comment you want to create" ,required=true )  @Valid @RequestBody NewCommentRequestData comment) {
        return getDelegate().createArticleComment(slug, comment);
    }


    /**
     * POST /articles/{slug}/favorite : Favorite an article
     * Favorite an article. Auth is required
     *
     * @param slug Slug of the article that you want to favorite (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Favorite an article", nickname = "createArticleFavorite", notes = "Favorite an article. Auth is required", response = SingleArticleResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Favorites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SingleArticleResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PostMapping(
        value = "/articles/{slug}/favorite",
        produces = { "application/json" }
    )
    default ResponseEntity<SingleArticleResponseData> createArticleFavorite(@ApiParam(value = "Slug of the article that you want to favorite",required=true) @PathVariable("slug") String slug) {
        return getDelegate().createArticleFavorite(slug);
    }


    /**
     * DELETE /articles/{slug} : Delete an article
     * Delete an article. Auth is required
     *
     * @param slug Slug of the article to delete (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Delete an article", nickname = "deleteArticle", notes = "Delete an article. Auth is required", authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Articles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @DeleteMapping(
        value = "/articles/{slug}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteArticle(@ApiParam(value = "Slug of the article to delete",required=true) @PathVariable("slug") String slug) {
        return getDelegate().deleteArticle(slug);
    }


    /**
     * DELETE /articles/{slug}/comments/{id} : Delete a comment for an article
     * Delete a comment for an article. Auth is required
     *
     * @param slug Slug of the article that you want to delete a comment for (required)
     * @param id ID of the comment you want to delete (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Delete a comment for an article", nickname = "deleteArticleComment", notes = "Delete a comment for an article. Auth is required", authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @DeleteMapping(
        value = "/articles/{slug}/comments/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteArticleComment(@ApiParam(value = "Slug of the article that you want to delete a comment for",required=true) @PathVariable("slug") String slug,@ApiParam(value = "ID of the comment you want to delete",required=true) @PathVariable("id") Integer id) {
        return getDelegate().deleteArticleComment(slug, id);
    }


    /**
     * DELETE /articles/{slug}/favorite : Unfavorite an article
     * Unfavorite an article. Auth is required
     *
     * @param slug Slug of the article that you want to unfavorite (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Unfavorite an article", nickname = "deleteArticleFavorite", notes = "Unfavorite an article. Auth is required", response = SingleArticleResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Favorites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SingleArticleResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @DeleteMapping(
        value = "/articles/{slug}/favorite",
        produces = { "application/json" }
    )
    default ResponseEntity<SingleArticleResponseData> deleteArticleFavorite(@ApiParam(value = "Slug of the article that you want to unfavorite",required=true) @PathVariable("slug") String slug) {
        return getDelegate().deleteArticleFavorite(slug);
    }


    /**
     * GET /articles/{slug} : Get an article
     * Get an article. Auth not required
     *
     * @param slug Slug of the article to get (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Get an article", nickname = "getArticle", notes = "Get an article. Auth not required", response = SingleArticleResponseData.class, tags={ "Articles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SingleArticleResponseData.class),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @GetMapping(
        value = "/articles/{slug}",
        produces = { "application/json" }
    )
    default ResponseEntity<SingleArticleResponseData> getArticle(@ApiParam(value = "Slug of the article to get",required=true) @PathVariable("slug") String slug) {
        return getDelegate().getArticle(slug);
    }


    /**
     * GET /articles/{slug}/comments : Get comments for an article
     * Get the comments for an article. Auth is optional
     *
     * @param slug Slug of the article that you want to get comments for (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Get comments for an article", nickname = "getArticleComments", notes = "Get the comments for an article. Auth is optional", response = MultipleCommentsResponseData.class, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MultipleCommentsResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @GetMapping(
        value = "/articles/{slug}/comments",
        produces = { "application/json" }
    )
    default ResponseEntity<MultipleCommentsResponseData> getArticleComments(@ApiParam(value = "Slug of the article that you want to get comments for",required=true) @PathVariable("slug") String slug) {
        return getDelegate().getArticleComments(slug);
    }


    /**
     * GET /articles : Get recent articles globally
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     *
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param limit Limit number of articles returned (default is 20) (optional, default to 20)
     * @param offset Offset/skip number of articles (default is 0) (optional, default to 0)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Get recent articles globally", nickname = "getArticles", notes = "Get most recent articles globally. Use query parameters to filter results. Auth is optional", response = MultipleArticlesResponseData.class, tags={ "Articles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MultipleArticlesResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @GetMapping(
        value = "/articles",
        produces = { "application/json" }
    )
    default ResponseEntity<MultipleArticlesResponseData> getArticles(@ApiParam(value = "Filter by tag") @Valid @RequestParam(value = "tag", required = false) String tag,@ApiParam(value = "Filter by author (username)") @Valid @RequestParam(value = "author", required = false) String author,@ApiParam(value = "Filter by favorites of a user (username)") @Valid @RequestParam(value = "favorited", required = false) String favorited,@ApiParam(value = "Limit number of articles returned (default is 20)", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Offset/skip number of articles (default is 0)", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        return getDelegate().getArticles(tag, author, favorited, limit, offset);
    }


    /**
     * GET /articles/feed : Get recent articles from users you follow
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     *
     * @param limit Limit number of articles returned (default is 20) (optional, default to 20)
     * @param offset Offset/skip number of articles (default is 0) (optional, default to 0)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Get recent articles from users you follow", nickname = "getArticlesFeed", notes = "Get most recent articles from users you follow. Use query parameters to limit. Auth is required", response = MultipleArticlesResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Articles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MultipleArticlesResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @GetMapping(
        value = "/articles/feed",
        produces = { "application/json" }
    )
    default ResponseEntity<MultipleArticlesResponseData> getArticlesFeed(@ApiParam(value = "Limit number of articles returned (default is 20)", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Offset/skip number of articles (default is 0)", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        return getDelegate().getArticlesFeed(limit, offset);
    }


    /**
     * PUT /articles/{slug} : Update an article
     * Update an article. Auth is required
     *
     * @param slug Slug of the article to update (required)
     * @param article Article to update (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unexpected error (status code 422)
     */
    @ApiOperation(value = "Update an article", nickname = "updateArticle", notes = "Update an article. Auth is required", response = SingleArticleResponseData.class, authorizations = {
        
        @Authorization(value = "Token")
         }, tags={ "Articles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SingleArticleResponseData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 422, message = "Unexpected error", response = GenericErrorModelData.class) })
    @PutMapping(
        value = "/articles/{slug}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SingleArticleResponseData> updateArticle(@ApiParam(value = "Slug of the article to update",required=true) @PathVariable("slug") String slug,@ApiParam(value = "Article to update" ,required=true )  @Valid @RequestBody UpdateArticleRequestData article) {
        return getDelegate().updateArticle(slug, article);
    }

}
